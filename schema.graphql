# Owner ---
type Owner @entity {
  id: ID!
  ownedCollections: [Collection!]! @derivedFrom(field: "owner")
  ownedCatalogs: [Catalog!]! @derivedFrom(field: "owner")
  ownedTokens: [Token!]! @derivedFrom(field: "owner")
  collectionBalance: BigInt!
  catalogBalance: BigInt!
  balance: BigInt!
}

# Collection ---
type Collection @entity {
  id: ID!
  owner: Owner!
  name: String
  symbol: String
  metadataURI: String!
  totalSupply: BigInt
  createAtBlock: BigInt!
  transactionHash: String!
  hasCustomCuts: Boolean!
  tokens: [Token!]! @derivedFrom(field: "collection")
  assetEntries: [AssetEntry!]! @derivedFrom(field: "collection")
}

# AssetEntry ---
type AssetEntry @entity {
  id: ID!
  assetId: BigInt!
  collection: Collection!
  createAtBlock: BigInt!
  transactionHash: String!
}

# Token ---
type Token @entity {
  id: ID!
  tokenId: BigInt!
  owner: Owner
  collection: Collection!
  createAtBlock: BigInt!
  transactionHash: String!
  transfers: [Transfer!]! @derivedFrom(field: "token")
  nestTransfers: [NestTransfer!]! @derivedFrom(field: "token")
}

type Transfer @entity {
  id: ID!
  token: Token!
  # Empty `from` is minting
  from: Owner
  # Empty `to` is burning
  to: Owner
  block: BigInt!
  timestamp: BigInt!
  transactionHash: String!
}

type NestTransfer @entity {
  id: ID!
  token: Token!
  # Empty `from` is minting
  from: Owner
  # Empty `to` is burning
  to: Owner
  # Empty if not from token but EOA
  fromToken: Token
  # Empty if not to token but EOA
  toToken: Token
  timestamp: BigInt!
  block: BigInt!
  transactionHash: String!
}

# Catalog ---
type Catalog @entity {
  id: ID!
  owner: Owner!
  metadataURI: String!
  type: String!
  createAtBlock: BigInt!
  transactionHash: String!
  parts: [Part!]! @derivedFrom(field: "catalog")
}

type Part @entity {
  id: ID!
  catalog: Catalog!
  partId: BigInt!
  itemType: Int!
  zIndex: Int!
  metadataURI: String!
  equippableAddresses: [String!]!
  equippableToAll: Boolean!
  createAtBlock: BigInt!
  transactionHash: String!
}
